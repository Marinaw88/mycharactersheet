{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Abilities","props","calculating","myEvent","value","target","calculatedValue","setState","justNum","calcNum","state","this","justnum","onChange","name","React","Component","App","abilities","displayInfo","num","push","colors","balls","i","ball","document","createElement","classList","add","style","background","Math","floor","random","length","left","top","transform","width","height","body","append","forEach","el","ra","to","x","y","animate","duration","direction","fill","iterations","Infinity","easing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sKA+GA,I,+EA3GMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAOVC,YAAc,SAACC,GACb,IAAIC,EAAQD,EAAQE,OAAOD,MACvBE,GAAmBF,EAAM,IAAI,EACjC,EAAKG,SAAS,CACZC,QAASJ,EACTK,QAASH,KAVT,EAAKI,MAAQ,CACXF,QAAS,GACTC,QAAS,IALM,E,qDAiBnB,OACE,gCACE,uBACAL,MAAOO,KAAKD,MAAME,QAClBC,SAAUF,KAAKT,cAEjB,+BAAKS,KAAKV,MAAMa,KAAhB,gBAAmCH,KAAKD,MAAMD,kB,GAxB1BM,IAAMC,YA8BxBC,E,uKAEF,IAAIC,EAAY,CAAC,WAAY,UACzBC,EAAc,GAClB,IAAK,IAAMC,KAAOF,EAChBC,EAAYE,KAAK,cAAC,EAAD,CAAWP,KAAMI,EAAUE,MAE9C,OACE,gCACE,iEACA,mEACCD,S,GAXSJ,IAAMC,WAwElBM,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAGtDC,EAAQ,GAELC,EAAI,EAAGA,EAHC,GAGaA,IAAK,CACjC,IAAIC,EAAOC,SAASC,cAAc,OAClCF,EAAKG,UAAUC,IAAI,QACnBJ,EAAKK,MAAMC,WAAaT,EAAOU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAOa,SACjEV,EAAKK,MAAMM,KAAX,UAAqBJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAArC,MACAT,EAAKK,MAAMO,IAAX,UAAoBL,KAAKC,MAAsB,IAAhBD,KAAKE,UAApC,MACAT,EAAKK,MAAMQ,UAAX,gBAAgCN,KAAKE,SAArC,KACAT,EAAKK,MAAMS,MAAX,UAAsBP,KAAKE,SAA3B,MACAT,EAAKK,MAAMU,OAASf,EAAKK,MAAMS,MAE/BhB,EAAMF,KAAKI,GACXC,SAASe,KAAKC,OAAOjB,GAIvBF,EAAMoB,SAAQ,SAACC,EAAIpB,EAAGqB,GACpB,IAAIC,EAAK,CACPC,EAAGf,KAAKE,UAAYV,EAAI,IAAM,GAAK,GAAK,IACxCwB,EAAmB,GAAhBhB,KAAKE,UAGCU,EAAGK,QACZ,CACE,CAAEX,UAAW,mBACb,CAAEA,UAAU,aAAD,OAAeQ,EAAGC,EAAlB,gBAA2BD,EAAGE,EAA9B,UAEb,CACEE,SAAgC,KAArBlB,KAAKE,SAAW,GAC3BiB,UAAW,YACXC,KAAM,OACNC,WAAYC,IACZC,OAAQ,mBAKCtC,QCvIAuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAAS0C,eAAe,SAM1BZ,M","file":"static/js/main.bd8da6b8.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass Abilities extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      justNum: \"\",\n      calcNum: \"\"\n    };\n  }\ncalculating = (myEvent) => {\n  let value = myEvent.target.value;\n  let calculatedValue = (value-10)/2;\n  this.setState({\n    justNum: value,\n    calcNum: calculatedValue \n  })\n}\nrender (){\n  return(\n    <div>\n      <input\n      value={this.state.justnum}\n      onChange={this.calculating}\n      />\n    <h3>{this.props.name} Calculated: {this.state.calcNum}</h3>\n    </div>\n  );\n}\n}\n\nclass App extends React.Component {\n  render() {\n    let abilities = [\"Strength\", \"Brains\"];\n    let displayInfo = []\n    for (const num in abilities){\n      displayInfo.push(<Abilities name={abilities[num]}/>)\n    }\n    return (\n      <div>\n        <h1>Let's Calculate Your Abilities!</h1>\n        <h2>Enter Your Points to Convert Them</h2>\n        {displayInfo}\n      </div>\n    );\n  }\n}\n\n//   changeStrength = (myEvent) => {\n//     this.setState({\n//       strength: myEvent.target.value\n//     });\n//   }\n\n//   changeBrains = (myEvent) => {\n//     this.setState({\n//       brains: myEvent.target.value\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n         \n\n//           <div class='enterTrait'>\n//           <p>\n//             Character sheet - let's get started!\n//           </p>\n//             <p>Strength:</p>\n//             <input\n//               value={this.state.strength}\n//               onChange={this.stateStrength}\n//             />\n//             <p>Brains:</p>\n//             <input\n//               value={this.state.brains}\n//               onChange={this.changeBrains}\n//             />\n//           </div>\n//           <div class='displayInfo'>\n//             <div class='strengthInfo'>\n//               <p>Strength Information</p>\n//               <p class='dispStrength'> {this.state.strength}</p>\n//               <p class='strengthMod'>{(this.state.strength - 10 / 2)}</p>\n//             </div>\n//             <div class='brainsInfo'>\n//               <p>Brains Information</p>\n//               <p class='dispBrains'>{this.state.brains}</p>\n//               <p class='brainsMod'>{(this.state.brains - 10) / 2}</p>\n//             </div>\n//           </div>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n\n\n//THIS CODE BELOW IS FROM THE INTERNET. IT MAKES FUN ANIMATED BACKGROUND HAPPEN\n\nconst colors = [\"#3CC157\", \"#2AA7FF\", \"#1B1B1B\", \"#FCBC0F\", \"#F85F36\"];\n\nconst numBalls = 50;\nconst balls = [];\n\nfor (let i = 0; i < numBalls; i++) {\n  let ball = document.createElement(\"div\");\n  ball.classList.add(\"ball\");\n  ball.style.background = colors[Math.floor(Math.random() * colors.length)];\n  ball.style.left = `${Math.floor(Math.random() * 100)}vw`;\n  ball.style.top = `${Math.floor(Math.random() * 100)}vh`;\n  ball.style.transform = `scale(${Math.random()})`;\n  ball.style.width = `${Math.random()}em`;\n  ball.style.height = ball.style.width;\n  \n  balls.push(ball);\n  document.body.append(ball);\n}\n\n// Keyframes\nballs.forEach((el, i, ra) => {\n  let to = {\n    x: Math.random() * (i % 2 === 0 ? -11 : 11),\n    y: Math.random() * 12\n  };\n\n  let anim = el.animate(\n    [\n      { transform: \"translate(0, 0)\" },\n      { transform: `translate(${to.x}rem, ${to.y}rem)` }\n    ],\n    {\n      duration: (Math.random() + 1) * 2000, // random duration\n      direction: \"alternate\",\n      fill: \"both\",\n      iterations: Infinity,\n      easing: \"ease-in-out\"\n    }\n  );\n});\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}